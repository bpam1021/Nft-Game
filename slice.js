import * as THREE from './three.module.js';

const exports = {};
const module = {exports};

var parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"rFDx":[function(require,module,exports) {
function n(n){return r(n).filter(o).map(function(n){return n.map(function(n){return n[0]})})}function r(n){changes=!0;for(var r=n.map(function(n){return[n]});changes;)changes=t(r);return r=r.filter(function(n){return n.length})}function t(n){return n.forEach(function(r,t){n.forEach(function(t,e){if(u(r,t))return delete n[e],!0})}),!1}function u(n,r){return n!==r&&(e(n)===f(r)?(n.unshift.apply(n,r),!0):e(n)===e(r)?(c(r),n.unshift.apply(n,r),!0):f(n)===e(r)?(n.push.apply(n,r),!0):f(n)===f(r)&&(c(r),n.push.apply(n,r),!0))}function e(n){return n[0][0]}function f(n){return n[n.length-1][1]}function c(n){n.reverse(),n.forEach(function(n){n.reverse()})}function o(n){return e(n)===f(n)?1:0}module.exports=n;
},{}],"LWWf":[function(require,module,exports) {
var e=require("./faces-from-edges.js");module.exports=function(t){"use strict";var s=["a","b","c"],r=function(e){return e<0?"back":e>0?"front":"on"},i=function(e,t){return t.distanceToPoint(e)},a=function(e,t,s){this.sourceGeometry=e,this.targetGeometry=t,this.slicePlane=s,this.addedVertices=[],this.addedIntersections=[],this.newEdges=[[]]};return a.prototype.startFace=function(e){this.sourceFaceIndex=e,this.sourceFace=this.sourceGeometry.faces[e],this.sourceFaceUvs=this.sourceGeometry.faceVertexUvs[0][e],this.faceIndices=[],this.faceNormals=[],this.faceUvs=[]},a.prototype.endFace=function(){var e=this.faceIndices.map(function(e,t){return t});this.addFace(e)},a.prototype.closeHoles=function(){this.newEdges[0].length&&e(this.newEdges).forEach(function(e){this.faceNormal(e).dot(this.slicePlane.normal)>.5&&e.reverse(),this.startFace(),this.faceIndices=e,this.endFace()},this)},a.prototype.addVertex=function(e){this.addUv(e),this.addNormal(e);var t,s=this.sourceFace[e];if(this.addedVertices.hasOwnProperty(s))t=this.addedVertices[s];else{var r=this.sourceGeometry.vertices[s];this.targetGeometry.vertices.push(r),t=this.targetGeometry.vertices.length-1,this.addedVertices[s]=t}this.faceIndices.push(t)},a.prototype.addIntersection=function(e,t,s,r){var i=Math.abs(s)/(Math.abs(s)+Math.abs(r));this.addIntersectionUv(e,t,i),this.addIntersectionNormal(e,t,i);var a,c=this.sourceFace[e],n=this.sourceFace[t],o=this.intersectionId(c,n);if(this.addedIntersections.hasOwnProperty(o))a=this.addedIntersections[o];else{var h=this.sourceGeometry.vertices[c],d=this.sourceGeometry.vertices[n],u=h.clone().lerp(d,i);this.targetGeometry.vertices.push(u),a=this.targetGeometry.vertices.length-1,this.addedIntersections[o]=a}this.faceIndices.push(a),this.updateNewEdges(a)},a.prototype.addUv=function(e){if(this.sourceFaceUvs){var t=this.keyIndex(e),s=this.sourceFaceUvs[t];this.faceUvs.push(s)}},a.prototype.addIntersectionUv=function(e,t,s){if(this.sourceFaceUvs){var r=this.keyIndex(e),i=this.keyIndex(t),a=this.sourceFaceUvs[r],c=this.sourceFaceUvs[i],n=a.clone().lerp(c,s);this.faceUvs.push(n)}},a.prototype.addNormal=function(e){if(this.sourceFace.vertexNormals.length){var t=this.keyIndex(e),s=this.sourceFace.vertexNormals[t];this.faceNormals.push(s)}},a.prototype.addIntersectionNormal=function(e,t,s){if(this.sourceFace.vertexNormals.length){var r=this.keyIndex(e),i=this.keyIndex(t),a=this.sourceFace.vertexNormals[r],c=this.sourceFace.vertexNormals[i],n=a.clone().lerp(c,s).normalize();this.faceNormals.push(n)}},a.prototype.addFace=function(e){if(3!==e.length){for(var t=[],s=0;s<e.length;s++)for(var r=s+1;r<e.length;r++){var i=Math.abs(s-r);i>1&&i<e.length-1&&t.push([e[s],e[r]])}t.sort(function(e,t){return this.faceEdgeLength(e[0],e[1])-this.faceEdgeLength(t[0],t[1])}.bind(this));var a=e.indexOf(t[0][0]),c=(e=e.slice(a).concat(e.slice(0,a))).indexOf(t[0][1]),n=e.slice(0,c+1),o=e.slice(c).concat(e.slice(0,1));this.addFace(n),this.addFace(o)}else this.addFacePart(e[0],e[1],e[2])},a.prototype.addFacePart=function(e,s,r){var i=null;this.faceNormals.length&&(i=[this.faceNormals[e],this.faceNormals[s],this.faceNormals[r]]);var a=new t.Face3(this.faceIndices[e],this.faceIndices[s],this.faceIndices[r],i);this.targetGeometry.faces.push(a),this.sourceFaceUvs&&this.targetGeometry.faceVertexUvs[0].push([this.faceUvs[e],this.faceUvs[s],this.faceUvs[r]])},a.prototype.faceEdgeLength=function(e,t){var s=this.faceIndices[e],r=this.faceIndices[t],i=this.targetGeometry.vertices[s],a=this.targetGeometry.vertices[r];return i.distanceToSquared(a)},a.prototype.intersectionId=function(e,t){return[e,t].sort().join(",")},a.prototype.keyIndex=function(e){return s.indexOf(e)},a.prototype.updateNewEdges=function(e){var t=this.newEdges.length-1,s=this.newEdges[t];s.length<2?s.push(e):this.newEdges.push([e])},a.prototype.faceNormal=function(e){var t=e.map(function(e){return this.targetGeometry.vertices[e]}.bind(this)),s=t[0].clone().sub(t[1]),r=t[0].clone().sub(t[2]);return s.cross(r).normalize()},function(e,c,n){var o=new t.Geometry,h=new a(e,o,c),d=[],u=[];return e.vertices.forEach(function(e){var t=i(e,c),s=r(t);d.push(t),u.push(s)}),e.faces.forEach(function(e,t){var r=s.map(function(t){return u[e[t]]});if(-1!==r.indexOf("front")||-1===r.indexOf("back")){h.startFace(t);var i=s[s.length-1],a=e[i],c=d[a],n=u[a];s.map(function(t){var s=e[t],r=d[s],o=u[s];"front"===o&&("back"===n?(h.addIntersection(i,t,c,r),h.addVertex(t)):h.addVertex(t)),"on"===o&&h.addVertex(t),"back"===o&&"front"===n&&h.addIntersection(i,t,c,r),i=t,a=s,n=o,c=r}),h.endFace()}}),n&&h.closeHoles(),o}};
},{"./faces-from-edges.js":"rFDx"}]},{},["LWWf"], null)

const slice = module.exports(THREE);
export default slice;